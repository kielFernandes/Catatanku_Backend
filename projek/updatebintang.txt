import { useEffect, useState } from "react";
import "../../src/dist/output.css";
import todoData from "./axTodo";
import { Link } from "react-router-dom";
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {faStar as regularStar} from "@fortawesome/free-regular-svg-icons";
import {faStar as solidStar} from "@fortawesome/free-solid-svg-icons";

const TodoList1 = () => {
    const [dataTodo1, setData] = useState(null);

    const getData = () => {
        todoData.get("/getTodo")
            .then(res => {
                setData(res.data)
            });
    }

    useEffect(() => {
        getData();
    }, []);

    const toggleCheck = (id) => {
        setData(prevData => {
            const newData = prevData.map(item => {
                if (item._id === id) {
                    return {
                        ...item,
                        checked: !item.checked
                    };
                }else{
                    return item
                }
                // console.log(item)
                // return item;
            });

            const updateItem = newData.find(item => item._id === id);
            updateCheckStatus(id,updateItem.checked) // Memanggil updateCheckStatus dengan status terbaru
            // updateCheckStatus(id,newData.find(item => item._id === id).checked)
            
            console.log(newData)
            return newData;
        });
    }
    
        //Update Status
        const updateCheckStatus = (id,checked) => {
            todoData.patch(`/putTodo/${id}`,{checked : checked})
            .then(res => {
                console.log(checked)
            })
        }

    const delTodo = (id) => {
        todoData.delete(`/delTodo/${id}`)
            .then(res => {
                getData();
            });
    }


    //Rating Update
    const handleRatingClick = (id,rating) => {
        updateRating(id,rating);
        console.log(rating)
        console.log(id)

    }

    //Function Rating
    const updateRating = (id,bintang) => {
        todoData.patch(`/putTodo/${id}`,{rating : bintang})
        .then((res) => {
            getData();
        }
        )
    }

    return (
        <div>
            {dataTodo1 !== null ? (
                dataTodo1.map(dt => (
                    <div className="isi flex" key={dt._id}>
                        <div className={`tekan my-10 mx-3`}>
                            <input type="checkbox" className="w-5 h-5 rounded-full" checked={dt.checked} onChange={() => toggleCheck(dt._id)} />
                        </div>
                        <div className={`kotak container w-4/5 mx-auto my-5 shadow-md rounded-lg p-3 flex relative ${dt.checked ? 'bg-green-300' : 'bg-white'}`}>
                            <p className="px-2 py-5">
                                {dt.komentar.length > 50 ? `${dt.komentar.slice(0, 30)}...` : dt.komentar}
                            </p>

                            <div className="tbbl absolute my-5 right-7">
                                <button className="px-5 bg-red-500 text-white py-1 rounded-full mx-5" onClick={() => { delTodo(dt._id) }}>Hapus</button>
                                <Link className="border-2 border-green-600 text-green-600 rounded-full px-5 py-1" to={`cekUpd/${dt._id}`}>
                                    <button>Lihat</button>
                                </Link>
                            </div>


                            <div className="rating absolute bottom-1 px-3 cursor-pointer">
                                {[1,2,3,4,5].map(star => (
                                    <FontAwesomeIcon key={star}
                                    icon={star <= dt.rating ? solidStar : regularStar}
                                    className="star-icon"
                                    onClick={() => handleRatingClick(dt._id,star)}
                                    />
                                ))}
                            </div>
                        </div>
                    </div>
                ))
            ) : (
                <p>Loading...</p>
            )}

            <div className="tbl m-5 w-max mx-auto">
                <Link to="/create" className="py-1 px-8 mx-auto text-2xl rounded-xl bg-green-300 hover:bg-green-600">+</Link>
            </div>
        </div>
    )
}

export default TodoList1;








Axios :
import Axios from "axios";

const todoData = Axios.create({
    baseURL : "http://localhost:3001/to"
})

export default todoData;












Backend :
1.rute todo.js
const express = require("express");
const ruteToDo = express.Router();
const todoSchema  = require("./todoschema");
const todoschema = require("./todoschema");

//1.Get Banyak Data
ruteToDo.get("/getTodo",async(req,res) => {
    try{
        const getData = await todoSchema.find();
        res.status(200).json(getData)
    }catch(err){
        console.log(err)
    }
})


//1.2 Get Berdasarkan Id
ruteToDo.get("/getTodo/:id",async(req,res) => {
    try{    
        //1.Mengambil ID
        const getId = req.params.id;
        //2.Mengambil Data berdasarkan ID
        const getData = await todoSchema.findById(getId)
        res.status(200).json(getData);
    }catch(err){
        res.status(404).json({message : "Data tidak ditemukan"})
    }
})

//2.Post Data
ruteToDo.post("/postTodo",async(req,res) => {
    try{
        //1.Kita ambil data dari body nya
        const bdy = req.body;
        //2.Kita post data dari body ke database
        const postData = new todoSchema(bdy)
        //3.Save Data ke database
        const svTodo = await postData.save()
        res.status(201).json(svTodo)
    }catch(err){
        res.status(400).json({message : "Gagal mengirim data"})
        console.log(err)
    }
})

//3.Delete Data
ruteToDo.delete("/delTodo/:id",async(req,res) => {
    try{
        //1.Kita mengambil data dari id head
        const getId = req.params.id
        //2.Kita delete data dari id
        const delToDo = await todoschema.findByIdAndDelete(getId);
        res.status(200).json({message : "Data berhasil dihapus"})
    }catch(err){
        res.status(400).json({message : "Data tidak ditemukan"})
        consol.log(err)
    }
})

//4.Patch Data
ruteToDo.patch("/putTodo/:id",async(req,res) => {
    try{
        //1.Kita mengambil data paramater
        const getId = req.params.id
        //2.Kita ambil data baru di body
        const getBdy = req.body
        //3.Kita ubah data di parameter
        const putData = await todoSchema.findByIdAndUpdate(getId,getBdy,{new:true})
        res.status(200).json(putData)
    }catch(err){
        res.status(400).json({message : "Data tidak bisa di edit"})
    }
})

module.exports = ruteToDo;





2.Schema
const mongoose = require("mongoose");

const schemaTodoList = new mongoose.Schema({
    komentar : {
        required : true,
        type : String
    },
    checked : {
        type : Boolean,
        default : false
    },
    rating : {
        type : Number,
        min : 0,
        max : 5,
        default : 0
    }
})

module.exports = mongoose.model("TodoList",schemaTodoList)